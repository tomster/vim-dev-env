" prolog
let s:uname = system("uname")
set nocompatible                  " Must come first because it changes other options.
filetype off
filetype plugin indent on    " required
set encoding=utf-8

" vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'klen/python-mode'    
Plugin 'flazz/vim-colorschemes'
Plugin 'tomtom/tcomment_vim'
Bundle "tobyS/rst-headings.vim"
Bundle "altercation/vim-colors-solarized"
Bundle "tacahiroy/ctrlp-funky"
Plugin 'davidhalter/jedi-vim'
Plugin 'hynek/vim-python-pep8-indent'
Bundle "moll/vim-bbye"
Bundle "chase/vim-ansible-yaml"
Bundle "othree/xml.vim"
Bundle 'gcmt/wildfire.vim'
Bundle "tpope/vim-surround"
call vundle#end()            " required

autocmd FileType yaml set smarttab expandtab tabstop=2 shiftwidth=2 softtabstop=2
syntax enable                     " Turn on syntax highlighting.
runtime macros/matchit.vim        " Load the matchit plugin.

set autoread " shut up when switching branches in git

"" colorscheme solarized
function! ToggleBG()
    let s:tbg = &background
    " Inversion
    if s:tbg == "dark"
        set background=light
        colorscheme Tomorrow
    else
        set background=dark
        colorscheme solarized
    endif
endfunction
nnoremap <Leader>bg :call ToggleBG()<Cr>
set background=light
colorscheme Tomorrow

""make copy paste work with clipboard
set clipboard+=unnamed  " use the clipboards of vim and win
" set paste               " Paste from a windows or from vim

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set backspace=indent,eol,start    " Intuitive backspacing.
set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set linebreak
set scrolloff=3                   " Show 3 lines of context around the cursor.
set title                         " Set the terminal's title
set visualbell                    " No beeping.
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location
set tabstop=4                    " how to display actual \t occurrences
set softtabstop=2                " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P


" Python settings
" highlight all python syntax
let python_highlight_all=1
autocmd FileType python setlocal foldmethod=syntax
autocmd FileType python set smarttab expandtab autoindent tabstop=4 shiftwidth=4 softtabstop=4
au FileType python : iabbrev pdb import pdb; pdb.set_trace()<LEFT>
" turn off pymode's linting, since we let syntastic do that already
let g:pymode_lint = 0
" same for hynek/vim-python-pep8-indent
let g:pymode_indent = 0
" and rope's autocompletion
let g:pymode_rope = 0

" Disabled 
" https://github.com/davidhalter/jedi-vim/issues/163#issuecomment-73343003
let g:jedi#show_call_signatures = 0
    
" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_python_checkers = ['pyflakes', 'flake8']
" note, that you can set pep8 options in tox.ini, per project!
let g:pymode_options_max_line_length = 131



" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


" nerdtree settings
" autocmd vimenter * NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore=[
    \'\.egg-info',
    \'\.cache',
    \'\.eggs',
    \'\.tox',
    \'\.coveragerc',
    \'\~$',
    \'\.pt.cache$',
    \'\.Python$',
    \'\.svn$',
    \'\.git*$',
    \'\.pyc$',
    \'__pycache__$',
    \'\.pyo$',
    \'\.mo$',
    \'\.o$',
    \'\.lo$',
    \'\.swp$',
    \'\.la$',
    \'\..*.rej$',
    \'\.rej$',
    \'\.\~lock.*#$',
    \'\.AppleDouble$',
    \'\.pt.py$',
    \'\.DS_Store$']

let NERDTreeShowHidden=1

" ctrlp settings
let g:ctrlp_cmd = 'CtrlP'
if s:uname == "Darwin\n"
	nnoremap ฯ :CtrlPBuffer<CR>
else
	nnoremap รฐ :CtrlPBuffer<CR>
endif
:nnoremap <Leader>p :CtrlPBuffer<CR>
" let g:ctrlp_cmd = 'exe "CtrlP".get(["Buffer", ""], v:count)'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(egg-info|git|hg|svn)$|(lib\/python)',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_use_caching = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_max_height = 10

let g:ctrlp_extensions = ['tag']
"ctrlp-funky
nnoremap <Leader>f :CtrlPFunky<Cr>


" short cut for bbye
:nnoremap <Leader>q :Bdelete<CR>

" Easy filetype switching
nnoremap ftm :set ft=markdown<CR>
nnoremap ftp :set ft=python<CR>
nnoremap ftw :set ft=wiki<CR>
nnoremap ftr :set ft=ruby<CR>
nnoremap ftrs :set ft=rst<CR>
nnoremap ftv :set ft=vim<CR>
nnoremap ftj :set ft=javascript<CR>
nnoremap fts :set ft=sql<CR>
nnoremap ftsh :set ft=sh<CR>
nnoremap fti :set ft=dosini<CR>

" cfg file type
let g:tagbar_type_cfg = {
    \ 'ctagstype': 'ini',
    \ 'kinds': ['s:section']
\ }
" Markdown type
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'kinds': [
          \ '1:header1',
          \ '2:header2',
          \ '3:header3',
          \ '4:header4',
          \ '5:header5',
          \ '6:header6',
          \ '7:header7'
    \ ]
\ }

let g:tagbar_type_yaml = {
    \ 'ctagstype': 'yaml',
    \ 'kinds': [
          \ 'd:definition',
          \ 'n:name'
    \ ]
\ }

    function! VisualTagsWrap()
        if !exists('g:tags_to_wrap')
            let g:tags_to_wrap=[]
        endif
        let g:tags_to_wrap=split(input('space separated tags to wrap block: ', join(g:tags_to_wrap, ' ')), '\s\+')
        if len(g:tags_to_wrap)>0
            execute 'normal! `>a</'.join(reverse(g:tags_to_wrap), '></').'>'
            execute 'normal! `<i<'.join(reverse(g:tags_to_wrap), '><').'>'
        endif
    endfunction
vnoremap <silent>,w <ESC>:call VisualTagsWrap()<CR>
set matchpairs+=<:>

" html/xml setup
:iabbrev <silent> </ </<C-X><C-O><c-r>=Eatchar('\s')<CR>
